filter(season %in% c("1_winter", "2_spring")) %>%
# filter(location_type %in% c("ESCA", "riparian")) %>%
filter(location_type %in% c("desert_fertilization")) %>%
# filter(survey_year <= 2016 & survey_year >= 2001) %>%
# filter(!survey_year == 2003) %>%   # Following Allen et al and Albuquerque et al.
filter(!site_code == "M-9")  %>%    # M-9 was only surveyed in 2001
# number of surveys in which each species was observed across the whole study period
group_by(code) %>% mutate(det_project = sum(det_survey, na.rm = TRUE)) %>%
# Finally, what are the seasonal bird communities?
# Which species were observed in winter and/or spring, across the whole study period?
# Give those a 1 in the new 'det_season' column if they were detected in that season
group_by(season, code) %>% mutate(det_season = sum(det_survey)) %>% ungroup() %>% arrange(code)
str(obs)
unique(obs$survey_year)
# filter observations by sites and years upon import
# This will define much of the spatial and temporal scope of the project
# as well as some of the community to be included ()
obs <- read.csv("~/GitHub/caplter-dynamicbirds/data/bird_observations_countmeanbyseason.csv", header = TRUE) %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
# filter(location_type %in% c("desert_fertilization")) %>%
filter(survey_year <= 2016 & survey_year >= 2001) %>%
filter(!survey_year == 2003) %>%   # Following Allen et al and Albuquerque et al.
filter(!site_code == "M-9")  %>%    # M-9 was only surveyed in 2001
# number of surveys in which each species was observed across the whole study period
group_by(code) %>% mutate(det_project = sum(det_survey, na.rm = TRUE)) %>%
# Finally, what are the seasonal bird communities?
# Which species were observed in winter and/or spring, across the whole study period?
# Give those a 1 in the new 'det_season' column if they were detected in that season
group_by(season, code) %>% mutate(det_season = sum(det_survey)) %>% ungroup() %>% arrange(code)
# filter observations by sites and years upon import
# This will define much of the spatial and temporal scope of the project
# as well as some of the community to be included ()
obs <- read.csv("~/GitHub/caplter-dynamicbirds/data/bird_observations_countmeanbyseason.csv", header = TRUE) %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
# filter(location_type %in% c("desert_fertilization")) %>%
filter(survey_year <= 2016 & survey_year >= 2001) %>%
filter(!survey_year == 2003) %>%   # Following Allen et al and Albuquerque et al.
filter(!site_code == "M-9")  %>%    # M-9 was only surveyed in 2001
# number of surveys in which each species was observed across the whole study period
group_by(code) %>% mutate(det_project = sum(det_survey, na.rm = TRUE)) %>%
# Finally, what are the seasonal bird communities?
# Which species were observed in winter and/or spring, across the whole study period?
# Give those a 1 in the new 'det_season' column if they were detected in that season
group_by(season, code) %>% mutate(det_season = sum(det_survey)) %>% ungroup() %>% arrange(code)
# Create lists of species
# 63 species were only ever observed once across the whole project
obs %>% filter(det_project <= 1) %>% pull(code) %>% unique() %>% length()
# but our analysis is by-season, so we should keep only species observed more than once in any given season
# 111 species were only observed once across all winter surveys
obs %>% filter(season == "1_winter") %>% filter(det_season <= 1) %>% pull(code) %>% unique() %>% length()
# 102 species were only observed once across all spring surveys
obs %>% filter(season == "2_spring") %>% filter(det_season <= 1) %>% pull(code) %>% unique() %>% length()
obs %>% filter(season == "2_spring") %>% filter(det_season > 1) %>% pull(code) %>% unique()
# Create lists of identified species (all species and excluding rare species) vs. unidentified species
spp.known <- obs %>% filter(!grepl("Unidentified", common_name)) %>% pull(code) %>% unique()
spp.unknown <- obs %>% filter(grepl("Unidentified", common_name)) %>% pull(code) %>% unique()
# list the species that we would potentially be modeling the occupancy of
# we would only want to analyze the non-domestic, known species that were actually detected more than once
spp.winter <- obs %>% group_by(code)  %>%  filter(det_survey > 0) %>%
filter(season == "1_winter") %>%  filter(det_season > 1) %>%
filter(code %in% spp.known) %>%  # known species as well
filter(!code %in% c("DODU", "DOGO", "ISCA", "CHGO")) %>%  # remove domestic species
pull(code) %>% unique()
spp.spring <- obs %>% group_by(code) %>%  filter(det_survey > 0) %>%
filter(season == "2_spring") %>% filter(det_season > 1) %>%
filter(code %in% spp.known) %>%
filter(!code %in% c("DODU", "DOGO", "ISCA", "CHGO")) %>% # remove domestic species
pull(code) %>% unique()
env.model <- env.all %>%
# remove the survey years and sites being excluded from the analysis%>%
filter(survey_year <= 2016 & survey_year >= 2001) %>%
filter(!survey_year == 2003) %>%   # Following Allen et al and Albuquerque et al.
filter(loc_type %in% c("ESCA", "riparian")) %>%
filter(!site_code == "M-9")  %>%    # M-9 was only surveyed in 2001
# filter(season %in% c("1_winter", "2_spring")) %>%
# group to standardize by season, since seasons will be modeled separately
# group_by(season) %>%
mutate(
NDBI_std = (NDBI - mean(NDBI, na.rm = TRUE))/sd(NDBI, na.rm = TRUE),
NISI_std = (NISI - mean(NISI, na.rm = TRUE))/sd(NISI, na.rm = TRUE),
NDISI_std = (NDISI - mean(NDISI, na.rm = TRUE))/sd(NDISI, na.rm = TRUE),
ENDISI_std = (ENDISI - mean(ENDISI, na.rm = TRUE))/sd(ENDISI, na.rm = TRUE),
ENDISIadj_std = (ENDISIadj - mean(ENDISIadj, na.rm = TRUE))/sd(ENDISIadj, na.rm = TRUE),
NDVI_std = (NDVI - mean(NDVI, na.rm = TRUE))/sd(NDVI, na.rm = TRUE),
SAVI_std = (SAVI - mean(SAVI, na.rm = TRUE))/sd(SAVI, na.rm = TRUE),
LST_std = (LST - mean(LST, na.rm = TRUE))/sd(LST, na.rm = TRUE),
ppt_sum_std = (ppt_sum - mean(ppt_sum, na.rm = TRUE))/sd(ppt_sum, na.rm = TRUE),
temp_max_std = (temp_max - mean(temp_max, na.rm = TRUE))/sd(temp_max, na.rm = TRUE),
temp_min_std = (temp_min - mean(temp_min, na.rm = TRUE))/sd(temp_min, na.rm = TRUE),
year_diff = survey_year - min(survey_year),
year_std = (year_diff - mean(year_diff, na.rm = TRUE))/sd(year_diff, na.rm = TRUE),
id = 1:length(site_code),
.by = c(season)) #%>% ungroup()
env.model  %>% arrange(id)
# check seasonal differences
env.model  %>%
# group to standardize by season, since seasons will be modeled separately
# group_by(season) %>%
reframe(
year_mean = mean(year_diff, na.rm = TRUE),
year_sd = sd(year_diff, na.rm = TRUE),
ENDISI_mean = mean(ENDISIadj, na.rm = TRUE),
ENDISI_sd = sd(ENDISIadj, na.rm = TRUE),
NDVI_mean = mean(NDVI, na.rm = TRUE),
NDVI_sd = sd(NDVI, na.rm = TRUE),
LST_mean = mean(LST, na.rm = TRUE),
LST_sd = sd(LST, na.rm = TRUE),
temp_mean = mean(temp_min, na.rm = TRUE),
temp_sd = sd(temp_min, na.rm = TRUE),
# ppt_sum_mean = mean(ppt_sum, na.rm = TRUE),
# ppt_sum_sd = sd(ppt_sum, na.rm = TRUE),
# id = 1:length(site_code),
.by = c(season)) #%>% ungroup()
# Winter data
env.win <- env.model %>%
ungroup() %>%
filter(season == "1_winter")
# env.win
# Spring data
env.spr <- env.model %>%
ungroup() %>%
filter(season == "2_spring")
# env.win
# add winter variables to the spring data
env.spr$ENDISI_winter <- env.win$ENDISIadj
env.spr$ENDISI_winter_std <- env.win$ENDISIadj_std
env.spr$NDVI_winter <- env.win$NDVI
env.spr$NDVI_winter_std <- env.win$NDVI_std
env.spr$LST_winter <- env.win$LST
env.spr$LST_winter_std <- env.win$LST_std
env.spr$temp_max_winter <- env.win$temp_max
env.spr$temp_max_winter_std <- env.win$temp_max_std
# env.spr$temp_min_winter <- env.win$temp_min
env.spr$temp_min_winter_std <- env.win$temp_min_std
env.spr$ppt_sum_winter <- env.win$ppt_sum
env.spr$ppt_sum_winter_std <- env.win$ppt_sum_std
length(unique(
env.win$site_code
))
range(env.win$survey_year)
range(env.win$survey_year)
env.model %>% filter(!season %in% c("annual")) %>%
ggplot(aes(x = ENDISI, y = ENDISIadj, group = season, col = season)) +
theme_classic() +
geom_point(alpha = 0.3, shape = 16) +
geom_smooth(method = "lm")+
# scale_color_brewer(palette = "Dark2") +
# scale_color_manual(values = pal_season) +
stat_cor(method = "spearman", cor.coef.name = "rho", p.accuracy = 0.001, r.accuracy = 0.001, color = "black") +
labs(x = "ENDISI uncorrected", y = "ENDISI corrected")
# NDVI peaks in moderately urbanized areas, except not quite during the winter
env.model %>% filter(!season %in% c("annual")) %>%# filter(season %in% c("2_spring")) %>%
ggplot(aes(x = ENDISIadj, y = NDVI, group = season, col = season)) +
theme_classic() +
geom_point(alpha = 0.3, shape = 16) +
# geom_smooth(method = "lm")+
geom_smooth(method = "lm", formula = y ~ x + I(x^2))+
# scale_color_manual(values = pal_season) +
stat_cor(method = "spearman", cor.coef.name = "rho", p.accuracy = 0.001, r.accuracy = 0.001, color = "black") +
labs(x = "Urbanization (ENDISI)", y = "NDVI")
env.model %>% filter(!season %in% c("annual")) %>% #filter(season %in% c("2_spring")) %>%
ggplot(aes(x = ENDISIadj_std^2, y = NDVI, group = season, col = season)) +
theme_classic() +
geom_point(alpha = 0.3, shape = 16) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2))+
# scale_color_brewer(palette = "Dark2") +
# scale_color_manual(values = pal_season) +
stat_cor(method = "spearman", cor.coef.name = "rho", p.accuracy = 0.001, r.accuracy = 0.001, color = "black") +
labs(x = "Quadratic Urbanization (ENDISI^2)", y = "NDVI")
# significantly but not highly correlated, as one would expect
env.model %>% filter(!season %in% c("annual")) %>% #filter(season %in% c("2_spring")) %>%
ggplot(aes(x = ENDISIadj, y = temp_min, group = season, col = season)) +
theme_classic() +
geom_point(alpha = 0.3, shape = 16) +
geom_smooth(method = "lm")+
# scale_color_brewer(palette = "Dark2") +
# scale_color_manual(values = pal_season) +
stat_cor(method = "spearman", cor.coef.name = "rho", p.accuracy = 0.001, r.accuracy = 0.001, color = "black") +
labs(x = "Urbanization (ENDISI)", y = "Air Temperature (Daily Minimum)")
# Pick the species data to model
# (A) Use all the species
# spp.model <- dimnames(y)[[2]]
# (B) Use just the species that were actually detected in a given season
# spp.model <- spp.winter
spp.model <- spp.spring
# (C) Use a subset of species (useful for model testing)
# spp.model <- sort(c(
#                "MODO", "VERD", "HOSP", "HOFI", "GTGR", "ANHU", "NOMO", "GAQU", "ABTO", "CBTH",
#                "WWDO", "BCHU", "COHU", "CACW", "GIWO" # add a few species of interest
#                ))
# spp.model <- data.spp %>% filter(cultural_niche %in% c("Friend", "Celebrity")) %>% pull(code) %>% sort()
# top 10 most abundant in winter and spring, respectively:
# c("VERD", "ANHU", "HOSP", "HOFI", "MODO", "GTGR", "YRWA", "ABTO", "WCSP", "CBTH")
# c("MODO", "VERD", "HOSP", "HOFI", "GTGR", "ANHU", "NOMO", "GAQU", "ABTO", "CBTH")
# subset the ysum and survey count data to the specific season and species being modeled (maybe all species)
# ysum.model <- ysum[,which(dimnames(ysum)[[2]] %in% spp.model),,1]
# K.model <- K[,,1]
ysum.model <- ysum[,which(dimnames(ysum)[[2]] %in% spp.model),,2]
K.model <- K[,,2]
data.spp.model <- data.spp %>% filter(code %in% spp.model)
# data.spp.model
# select species traits to be used as covariates
traits.response <- data.spp.model %>%
# standardize trait covariates based on the modeled community
# filter(code %in% spp.model) %>%
mutate(
Wing_std = (Wing.Length - mean(Wing.Length, na.rm = TRUE))/sd(Wing.Length, na.rm = TRUE),
WingLog_std = (WingLog - mean(WingLog, na.rm = TRUE))/sd(WingLog, na.rm = TRUE),
Mass_std = (Mass - mean(Mass, na.rm = TRUE))/sd(Mass, na.rm = TRUE),
MassLog_std = (MassLog - mean(MassLog, na.rm = TRUE))/sd(MassLog, na.rm = TRUE),
HWI_std = (Hand.Wing.Index - mean(Hand.Wing.Index, na.rm = TRUE))/sd(Hand.Wing.Index, na.rm = TRUE),
dietdiv_std = (Hand.Wing.Index - mean(Hand.Wing.Index, na.rm = TRUE))/sd(Hand.Wing.Index, na.rm = TRUE)
) %>% arrange(code) %>%
# select which covariates to model
select(
MassLog_std,
dietdiv_std,
HWI_std
) %>% as.matrix(nrow = length(spp.model))
# traits.response
# Vectorize phylogenetic structure
# to account for phylogenetic effects, we need vectors of integers (length = # of species),
# where each number corresponds to the taxon
# taxonomic orders
data.spp.model$common_name[which(is.na(data.spp.model$Order) == TRUE)] # are there any with NA?
data.spp.model <- data.spp.model %>% arrange(Order)
(t.orders <- unique(data.spp.model$Order))  # this might include NA
data.spp.model$order_vec <- as.integer(factor(data.spp.model$Order, labels = 1:(length(t.orders))))
order_vec <- data.spp.model %>% arrange(code) %>% pull(order_vec)
# taxonomic families
data.spp.model <- data.spp.model %>% arrange(Family)
(t.families <- unique(data.spp.model$Family))
data.spp.model$family_vec <- as.integer(factor(data.spp.model$Family, labels = 1:(length(t.families))))
family_vec <- data.spp.model %>% arrange(code) %>% pull(family_vec)
data.spp.model %>% filter(code %in% spp.spring) %>% select(common_name, Order, Family)
# Pick the species data to model
# (A) Use all the species
# spp.model <- dimnames(y)[[2]]
# (B) Use just the species that were actually detected in a given season
# spp.model <- spp.winter
spp.model <- spp.spring
# (C) Use a subset of species (useful for model testing)
# spp.model <- sort(c(
#                "MODO", "VERD", "HOSP", "HOFI", "GTGR", "ANHU", "NOMO", "GAQU", "ABTO", "CBTH",
#                "WWDO", "BCHU", "COHU", "CACW", "GIWO" # add a few species of interest
#                ))
# spp.model <- data.spp %>% filter(cultural_niche %in% c("Friend", "Celebrity")) %>% pull(code) %>% sort()
# top 10 most abundant in winter and spring, respectively:
# c("VERD", "ANHU", "HOSP", "HOFI", "MODO", "GTGR", "YRWA", "ABTO", "WCSP", "CBTH")
# c("MODO", "VERD", "HOSP", "HOFI", "GTGR", "ANHU", "NOMO", "GAQU", "ABTO", "CBTH")
# subset the ysum and survey count data to the specific season and species being modeled (maybe all species)
# ysum.model <- ysum[,which(dimnames(ysum)[[2]] %in% spp.model),,1]
# K.model <- K[,,1]
ysum.model <- ysum[,which(dimnames(ysum)[[2]] %in% spp.model),,2]
K.model <- K[,,2]
data.spp.model <- data.spp %>% filter(code %in% spp.model)
# data.spp.model
# select species traits to be used as covariates
traits.response <- data.spp.model %>%
# standardize trait covariates based on the modeled community
# filter(code %in% spp.model) %>%
mutate(
Wing_std = (Wing.Length - mean(Wing.Length, na.rm = TRUE))/sd(Wing.Length, na.rm = TRUE),
WingLog_std = (WingLog - mean(WingLog, na.rm = TRUE))/sd(WingLog, na.rm = TRUE),
Mass_std = (Mass - mean(Mass, na.rm = TRUE))/sd(Mass, na.rm = TRUE),
MassLog_std = (MassLog - mean(MassLog, na.rm = TRUE))/sd(MassLog, na.rm = TRUE),
HWI_std = (Hand.Wing.Index - mean(Hand.Wing.Index, na.rm = TRUE))/sd(Hand.Wing.Index, na.rm = TRUE),
dietdiv_std = (Hand.Wing.Index - mean(Hand.Wing.Index, na.rm = TRUE))/sd(Hand.Wing.Index, na.rm = TRUE)
) %>% arrange(code) %>%
# select which covariates to model
select(
MassLog_std,
dietdiv_std,
HWI_std
) %>% as.matrix(nrow = length(spp.model))
# traits.response
# Vectorize phylogenetic structure
# to account for phylogenetic effects, we need vectors of integers (length = # of species),
# where each number corresponds to the taxon
# taxonomic orders
data.spp.model$common_name[which(is.na(data.spp.model$Order) == TRUE)] # are there any with NA?
data.spp.model <- data.spp.model %>% arrange(Order)
(t.orders <- unique(data.spp.model$Order))  # this might include NA
data.spp.model$order_vec <- as.integer(factor(data.spp.model$Order, labels = 1:(length(t.orders))))
order_vec <- data.spp.model %>% arrange(code) %>% pull(order_vec)
# taxonomic families
data.spp.model <- data.spp.model %>% arrange(Family)
(t.families <- unique(data.spp.model$Family))
data.spp.model$family_vec <- as.integer(factor(data.spp.model$Family, labels = 1:(length(t.families))))
family_vec <- data.spp.model %>% arrange(code) %>% pull(family_vec)
data.spp.model %>% filter(code %in% spp.spring) %>% select(common_name, Order, Family)
# base dimensions for the model data
n.site <- dim(ysum.model)[[1]]       # number of sites
n.spp <- dim(ysum.model)[[2]]        # number of species
n.season <- dim(ysum.model)[[3]]     # number of sampling periods (in this case, surveys years for each season)
n.survey <- dim(y)[[3]]              # max number of sampling occasions
# create "interaction covariates" by multiplying standardized covariates together
env.model <- env.model %>%
mutate(
urbXveg = ENDISIadj_std*NDVI_std,
urbXlst = ENDISIadj_std*LST_std,
urbXtmin = ENDISIadj_std*temp_min_std,
urbXtmax = ENDISIadj_std*temp_max_std,
urbXppt = ENDISIadj_std*ppt_sum_std
)
# select the covariates that will be included in the model here
covariates.occ <- c(
"intercept",
# "ENDISI_std",
"ENDISIadj_std",
# "LST_std",
# "urbXtemp",
# "LST_std",
# "urbXlst",
"temp_min_std",
"urbXtmin",
"NDVI_std",
"urbXveg"#,
# "ppt_sum_std",
# "urbXppt"#,
# "LST_std"
)
covariates.det <- c(
"intercept"
)
# Organize the covariates as matrices/arrays that can be easily subset as vectors within the model
# these vectors will be multiplied by the slope parameters within the regression term
# the last dimension is the number of covariates, including the intercept
a.cov.occ <- array(NA, dim = c(n.site, n.season, length(covariates.occ)))
a.cov.det <- array(NA, dim = c(n.site, n.season, length(covariates.det)))
# The first "covariate" will need to be multiplied the intercept, so let's start with '1' for that
a.cov.occ[,,1] <- 1
a.cov.det[,,1] <- 1
# Add the covariates that are being included
str(env.model)
for(n in 2:length(covariates.occ)){
a.cov.occ[,,n] <- env.model %>% filter(season == "2_spring") %>%
select(site_code, survey_year, covariates.occ[n]) %>%
pivot_wider(names_from = survey_year, values_from = covariates.occ[n]) %>%
column_to_rownames("site_code") %>% as.matrix()
}
a.cov.occ[,1,] %>%
# head(10) %>%
str()
dimnames(a.cov.occ)[[3]] <- covariates.occ
dimnames(a.cov.det)[[3]] <- covariates.det
# an integer vector of survey year (1 = the earliest year, 2001, 15 = the latest year 2016)
year_vec <- 1:n.season
# t# include some of the detection
#
obs.model <- obs %>% filter(code %in% spp.known) %>%
# calculate a global average abundance as the mean count per survey/site/year
mutate(abundance_mean = mean(count_mean, na.rm = TRUE), .by = c(code)) %>%
# group_by(code, season, survey_year) %>% mutate(abundance_tot = mean(count_mean, na.rm = TRUE)) %>%
# group_by(code) %>% mutate(abundance_mean = mean(abundance_tot, na.rm = TRUE)) %>%
group_by(code, season) %>% slice(1) %>%
# left_join(data.spp) %>%
select(c(
common_name, code, season,
det_project, det_season, abundance_mean)) %>% # everything should be the same here except det_season
pivot_wider(names_from = season, names_prefix = "det_", values_from = det_season) %>%
left_join(data.spp) %>%
select( # use select to reorder the columns
common_name,  #nombre_comun_MX,
sci_name,code,
det_project, det_1_winter, det_2_spring, abundance_mean,,
sci_name, nombre_comun_MX,
popularity, congruence,
Celebrity, Friend, Neighbor, Stranger
) %>% arrange(common_name)
# t# include some of the detection
#
obs.model <- obs %>% filter(code %in% spp.known) %>%
# calculate a global average abundance as the mean count per survey/site/year
mutate(abundance_mean = mean(count_mean, na.rm = TRUE), .by = c(code)) %>%
# group_by(code, season, survey_year) %>% mutate(abundance_tot = mean(count_mean, na.rm = TRUE)) %>%
# group_by(code) %>% mutate(abundance_mean = mean(abundance_tot, na.rm = TRUE)) %>%
group_by(code, season) %>% slice(1) %>%
# left_join(data.spp) %>%
select(c(
common_name, code, season,
det_project, det_season, abundance_mean)) %>% # everything should be the same here except det_season
pivot_wider(names_from = season, names_prefix = "det_", values_from = det_season) %>%
left_join(data.spp) %>%
select( # use select to reorder the columns
common_name,  #nombre_comun_MX,
sci_name,code,
det_project, det_1_winter, det_2_spring, abundance_mean,,
sci_name, nombre_comun_MX#,
# popularity, congruence,
# Celebrity, Friend, Neighbor, Stranger
) %>% arrange(common_name)
str(obs.model)
write.csv((obs.model %>% filter(code %in% spp.spring)), "~/GiHub/caplter-dynamicbirds/figures/supplementarytable_specieslist_spring.csv", row.names = FALSE)
write.csv((obs.model %>% filter(code %in% spp.spring)), "~/GitHub/caplter-dynamicbirds/figures/supplementarytable_specieslist_spring.csv", row.names = FALSE)
# t# include some of the detection
#
obs.model <- obs %>% filter(code %in% spp.known) %>%
# calculate a global average abundance as the mean count per survey/site/year
mutate(abundance_mean = mean(count_mean, na.rm = TRUE), .by = c(code)) %>%
# group_by(code, season, survey_year) %>% mutate(abundance_tot = mean(count_mean, na.rm = TRUE)) %>%
# group_by(code) %>% mutate(abundance_mean = mean(abundance_tot, na.rm = TRUE)) %>%
group_by(code, season) %>% slice(1) %>%
# left_join(data.spp) %>%
select(c(
common_name, code, season,
det_project, det_season, abundance_mean)) %>% # everything should be the same here except det_season
pivot_wider(names_from = season, names_prefix = "det_", values_from = det_season) %>%
left_join(data.spp) %>%
select( # use select to reorder the columns
common_name,  #nombre_comun_MX,
sci_name,code,
det_project, det_1_winter, det_2_spring, abundance_mean,,
sci_name, nombre_comun_MX#,
# popularity, congruence,
# Celebrity, Friend, Neighbor, Stranger
) %>% arrange(common_name)
obs.model$det_1_winter[which(is.na(obs.model$det_1_winter) == TRUE)] <- 0
obs.model$det_2_spring[which(is.na(obs.model$det_2_spring) == TRUE)] <- 0
obs.model %>% filter(code %in% spp.winter) %>% arrange(desc(det_project)) %>% arrange(common_name)
obs.model %>% filter(code %in% spp.spring) %>% arrange(desc(det_project))
# write.csv((obs.model %>% filter(code %in% spp.winter)), "~/GitHub/caplter-dynamicbirds/figures/supplementarytable_specieslist_winter.csv", row.names = FALSE)
write.csv((obs.model %>% filter(code %in% spp.spring)), "~/GitHub/caplter-dynamicbirds/figures/supplementarytable_specieslist_spring.csv", row.names = FALSE)
rm(
obs,
env.all, endisi.adj,
data.diet.checked, data.diet,
# data.spp.obs,
plot.trend
)
save.image(file = "~/GitHub/caplter-dynamicbirds/data/modelinputs_CAPbirds2025.RData")
rm(
obs,
env.all, endisi.adj,
data.diet.checked, data.diet,
# data.spp.obs,
plot.trend
)
save.image(file = "~/GitHub/caplter-dynamicbirds/data/modelinputs_dynamicbirds2025.RData")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
include = TRUE,
cache = TRUE
)
rm(list = ls())
gc()
library(tidyverse)
library(beepr)  # for notifying you when some code is  done running
# for statistical modeling
library(performance)  # for checking model performance (multicollinearity, VIF, overdispersion, etc.)
library(insight)      # for extracting a lot of useful model information, using functions like 'get_variance()'
library(lme4)
library(glmmTMB)
library(lmerTest)     # for getting p-values out of the lmer models
library(MuMIn)        # for calculating R^2, among other things
library(vegan)        # for multivariate community analyses
# library(rjags)
library(jagsUI)       # for running Bayesian models in JAGS
library(mgcv)         # for GAM(M)s
library(itsadug)      # for GAMM plotting
# for plotting
# library(ggplot2)      # should already be in the 'tidyverse'
library(ggpubr)       # for adding correlations and p-values to ggplot
library(ggeffects)    # for plotting glmm effects in ggplot
library(ggcorrplot)   # for correlation plots
library(GGally)       # similar to ggcorrplot
library(gghighlight)  # for highlighting groups in ggplot
library(RColorBrewer)
library(ggridges)
list.files("~/GitHub/caplter-dynamicbirds/data")
# This contains data assembled by the '2_1_StatisticalModelingSetup_CAPbirds' file
load("~/GitHub/caplter-dynamicbirds/data/modelinputs_dynamicbirds2025.RData")
# Bundle data for BUGS
str(bdata <- list(
y = ysum.model,    # total # of detections per site/species/season
K = K.model,      # a matrix of # of survey occasions per site/season
psi.cov = a.cov.occ,           # occupancy covariates, including '1' for the intercept
ncov.occ = dim(a.cov.occ)[3],  # number of occupancy covariates, including the intercept
rho.cov = a.cov.det,           # detection covariates, including '1' for the intercept
ncov.det = dim(a.cov.det)[3],  # number of detection covariates, including the intercept
traits = traits.response,      # response-trait covariates
n.traits = dim(traits.response)[2],
n.site = dim(ysum.model)[[1]],
n.species = dim(ysum.model)[[2]],
order_vec = order_vec,
n.orders = length(unique(order_vec)),
family_vec = family_vec,
n.family = length(unique(family_vec)),
# n.survey = n.survey,  # max number of surveys
year_vec = year_vec,
n.season = dim(ysum.model)[[3]]  # number of 'seasons' AKA years
)
)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
include = TRUE,
cache = TRUE
)
rm(list = ls())
gc()
list.files("~/GitHub/caplter-dynamicbirds/data/input")
# This contains data assembled by the '2_1_StatisticalModelingSetup_CAPbirds' file
load("~/GitHub/caplter-dynamicbirds/data/modelinputs_dynamicbirds2025.RData")
list.files("~/GitHub/caplter-dynamicbirds/data/input")
# This contains data assembled by the '2_1_StatisticalModelingSetup_CAPbirds' file
load("~/GitHub/caplter-dynamicbirds/data/input/modelinputs_dynamicbirds2025.RData")
# load("~/Github/caplter-dynamicbirds/data/input/jagsinputs_CAPbirds2024.RData")  # the bundled BUGS data
data.spp <- data.spp %>% filter(code %in% dimnames(ysum.model)[[2]])
